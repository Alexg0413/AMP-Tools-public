#pragma once

#include "tools/Algorithms.h"
#include "tools/Environment.h"
#include "tools/Path.h"
#include "tools/Graph.h"

#include <tuple>

namespace amp {

/// @brief Derive this class and implement your algorithm in the `plan` method. 
class KinodynamicRRT : public KinodynamicMotionPlanner {
    public:
        /// @brief Solve a motion planning problem. Create a derived class and override this method
        //virtual amp::KinoPath plan(const amp::KinodynamicProblem2D& problem) = 0;

        virtual ~KinodynamicRRT() {}
};

class HW9 {
    public:
        /// @brief Get WO1 described in Exercise 2.
        /// @return Workspace 1
        static amp::KinodynamicProblem2D getStateIntProblem();

        /// @brief Get WO2 described in Exercise 2.
        /// @return Workspace 2
        static amp::KinodynamicProblem2D getWorkspace2();

        /// @brief Get kinodynamic problem statements.
        static amp::KinodynamicProblem2D getFOUniProblem();
        static amp::KinodynamicProblem2D getSOUniProblem();
        static amp::KinodynamicProblem2D getCarInWS1();
        static amp::KinodynamicProblem2D getParkingProblem();

        /// @brief Checks the path generated by your motion planner against the problem
        /// @param path Path generated by your motion planner
        /// @param prob Problem that path was generated on
        /// @param verbose Output logs displaying result
        /// @return `true` if path is a valid solution, `false` otherwise
        static bool check(const amp::KinoPath& path, const amp::KinodynamicProblem2D& prob, bool verbose = true);

        /// @brief Checks the path generated by your motion planner against the problem
        /// @param path Path generated by your motion planner
        /// @param prob Problem that path was generated on
        /// @param verbose Output logs displaying result
        /// @param collision_points Gather collision points found along the path
        /// @return `true` if path is a valid solution, `false` otherwise
        // static bool check(const amp::KinoPath& path, const amp::KinodynamicProblem2D& prob, std::vector<Eigen::Vector2d>& collision_points, bool verbose = true);

        /// @brief Generates a random problem, runs the algorithm, then check the validity of the returned solution.
        /// Similar to what the benchmarker in `grade()` will do
        /// @param algo Your implemented algorithm
        /// @param seed Seed the random generator. If the seed is `0u`, no seed is used (random)
        /// @param verbose Output logs displaying result
        /// @return `true` if path is a valid solution, `false` otherwise
        static bool generateAndCheck(amp::KinodynamicMotionPlanner& algo, bool verbose = true, uint32_t seed = 0u);

        /// @brief Generates a random problem, runs the algorithm, then check the validity of the returned solution.
        /// Similar to what the benchmarker in `grade()` will do
        /// @param algo Your implemented algorithm
        /// @param path Return the path generated by your algorithm
        /// @param prob Return the randomly generated problem used
        /// @param seed Seed the random generator. If the seed is `0u`, no seed is used (random)
        /// @param verbose Output logs displaying result
        /// @return `true` if path is a valid solution, `false` otherwise
        static bool generateAndCheck(amp::KinodynamicMotionPlanner& algo, amp::KinoPath& path, amp::KinodynamicProblem2D& prob, bool verbose = true, uint32_t seed = 0u);

        /// @brief Generates a random problem, runs the algorithm, then check the validity of the returned solution.
        /// Similar to what the benchmarker in `grade()` will do
        /// @param algo Your implemented algorithm
        /// @param path Return the path generated by your algorithm
        /// @param prob Return the randomly generated problem used
        /// @param collision_points Gather collision points found along the path
        /// @param seed Seed the random generator. If the seed is `0u`, no seed is used (random)
        /// @param verbose Output logs displaying result
        /// @return `true` if path is a valid solution, `false` otherwise
        // static bool generateAndCheck(amp::KinodynamicMotionPlanner& algo, amp::KinoPath& path, amp::KinodynamicProblem2D& prob, std::vector<Eigen::Vector2d>& collision_points, bool verbose = true, uint32_t seed = 0u);

        static int grade(KinodynamicRRT& kino_algo, const std::string& email, int argc, char** argv);

        template <class KINO_ALG_T>
        static int grade(const std::string& email, int argc, char** argv);

        template <class KINO_ALG_T, class _KINO_CTOR_ARGS_TUP>
        static int grade(const std::string& email, int argc, char** argv, 
                    const _KINO_CTOR_ARGS_TUP& kino_ctor_args_tuple);
    private:
        static void assertDerivesSamplerAlgo(amp::KinodynamicMotionPlanner& algo);
};

#define AMP_HW9_ALIAS "hw9"
#define AMP_HW9_PACKAGE_NAME "hw9_report_card"
}

#include "public/HW9_impl.h"